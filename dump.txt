from torchvision.transforms import ToTensor, Normalize, Compose

from PIL import Image


import pandas as pd
import torch
from torch.utils.data import Dataset, DataLoader
from torchvision import transforms
import numpy as np

class CSVImageDataset(Dataset):
    def __init__(self, csv_file, transform=None):
        """
        Args:
            csv_file (string): Path to the csv file.
            transform (callable, optional): Optional transform to be applied on a sample.
        """
        self.data_frame = pd.read_csv(csv_file)

        # Drop 'id' column if it exists
        if 'id' in self.data_frame.columns:
            self.data_frame.drop(columns=['id'], inplace=True)

        self.transform = transform

    def __len__(self):
        return len(self.data_frame)

    def __getitem__(self, idx):
        if torch.is_tensor(idx):
            idx = idx.tolist()

        # Assuming first column is 'label' after dropping 'id'
        image = self.data_frame.iloc[idx, :-1].to_numpy()
        image = image.astype('float').reshape(28, 28)  # Reshape to 28x28
        label = int(self.data_frame.iloc[idx, -1])  # First column is 'label'

        if self.transform:
            image = self.transform(image)

        return image, label

csv_dataset = CSVImageDataset('train.csv', transform=train_transforms)
train_loader = DataLoader(csv_dataset, batch_size=4, shuffle=True)

train_transforms = transforms.Compose([ transforms.ToTensor() , transforms.Normalize((0.1307), (0.3081)), transforms.RandomRotation(5), transforms.Resize((30,30)), transforms.CenterCrop((28,28))])
# Load the datasets
# train_dataset = CustomMNISTDataset('train.csv', transform=train_transforms)
# test_dataset = CustomMNISTDataset('test.csv', transform=train_transforms)

# Create DataLoader
# train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)
# test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)